name: test

on: [pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.6.0
        with:
          skip-pkg-cache: true
          skip-build-cache: true

  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - run: go mod download

      - name: Test
        run: go test -race -covermode=atomic -coverprofile=coverage.txt ./...

      - uses: actions/upload-artifact@v3
        with:
          name: unit-coverage
          path: coverage.txt

  acceptance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - run: go mod download

      - name: Set up services
        env:
          COMPOSE_FILE: ./integration/docker-compose.yml
        run: |
          docker-compose build
          docker-compose up -d --force-recreate jenkins
          while [ "$(docker inspect jenkins-provider-acc --format '{{ .State.Health.Status }}')" != "healthy" ]; do echo "Waiting for Jenkins to start..."; sleep 3; done

      - name: Run Acceptance Tests
        env:
          TF_ACC: "1"
          JENKINS_URL: "http://localhost:8080"
          JENKINS_USERNAME: "admin"
          JENKINS_PASSWORD: "admin"
        run: go test -v -covermode=atomic -coverprofile=coverage.txt ./...

      - uses: actions/upload-artifact@v3
        with:
          name: acceptance-coverage
          path: coverage.txt

  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Build binary
        run: go install

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v2

      - name: Add terraformrc override
        run: |
          cat << EOF > ~/.terraformrc
          provider_installation {
            dev_overrides {
              "taiidani/jenkins" = "$(go env GOPATH)/bin"
            }
            direct {}
          }
          EOF

      - name: Set up services
        env:
          COMPOSE_FILE: ./integration/docker-compose.yml
        run: |
          docker-compose build
          docker-compose up -d --force-recreate jenkins
          while [ "$(docker inspect jenkins-provider-acc --format '{{ .State.Health.Status }}')" != "healthy" ]; do echo "Waiting for Jenkins to start..."; sleep 3; done

      - name: Init integration
        working-directory: integration/
        run: terraform init

      - name: Run integration
        working-directory: integration/
        run: terraform apply -no-color -auto-approve

      - name: Apply again
        working-directory: integration/
        run: terraform apply -no-color -auto-approve

      - name: Destroy integration
        working-directory: integration/
        run: terraform destroy -no-color -auto-approve

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Generate Docs
        run: make generate

      - name: Verify directory is clean
        run: test -z "$(git status --porcelain)"

      - name: Error message
        if: failure()
        run: |
          echo ':warning: Generated docs differs from committed docs. Did you forget to run `make generate`?' >> $GITHUB_STEP_SUMMARY
